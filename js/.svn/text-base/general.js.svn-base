
$(document).ready(
	function(){
		htmlPlayer();		
	}	
);
/*
function htmlPlayer(){var videoContainer;var videoPlayer;var videoController;var videoSlideBar;var videoSoundSlideBar;var videoTimer;var videoDuration;var videoCurrentTime=0;var videoSeekTimer;var videoSeekTimePoint;var videoRepeat=false;var mouseHandle;var videoOrigWidth,videoOrigHeight;var videoIsFullScreen;var videoMuted=false;videoContainer=$("#videoContainer");videoPlayer=$("#videoContainer #video");videoController=$("#videoContainer #controller");videoSlideBar=$("#videoContainer #slideBar");videoSoundSlideBar=$("#videoContainer #soundSlideBar");videoPlayer.attr("controls","");layout();ready();showCurrentTime();$(window).resize(function(){if(videoIsFullScreen){fullScreenOn();}});videoSoundSlideBar.slider({value:0.5,min:0,max:1.0,step:0.01,slide:function(event,ui){console.log("ui:"+ui.value);videoPlayer.attr("volume",ui.value);if(ui.value==0){videoMuted=true;videoPlayer.attr("muted","muted");if($("#videoContainer #soundButtom").hasClass("soundOn")){$("#videoContainer #soundButtom").removeClass("soundOn");$("#videoContainer #soundButtom").addClass("soundOff");}}else{videoMuted=false;videoPlayer.attr("muted","");if($("#videoContainer #soundButtom").hasClass("soundOff")){$("#videoContainer #soundButtom").removeClass("soundOff");$("#videoContainer #soundButtom").addClass("soundOn");}}}});videoContainer.mouseenter(function(){$("#videoContainer #control,#controlBg, #slideBar").show();console.log("mouseIn");}).mouseleave(function(){$("#videoContainer #control,#controlBg, #slideBar").hide();console.log("mouseout");}).mousemove(function(){if(videoPlayer.attr("controls")!="")videoPlayer.attr("controls","");});$("#videoContainer .controlItem").mouseenter(function(){$(this).css("opacity","1");}).mouseleave(function(){$(this).css("opacity","0.5");});$("#videoContainer #playButtom, #videoContainer #video, #videoContainer .play").live("click",function(){console.log("play clicked");play();});$("#videoContainer #stopButtom").click(function(){console.log("stop clicked");stop();clearInterval(videoTimer);});$("#videoContainer #fullScreenButtom").click(function(){console.log("fullScreen clicked");if(videoIsFullScreen){fullScreenOff();}else{fullScreenOn();}});$("#videoContainer #soundButtom").click(function(){console.log("sound clicked");if(!videoMuted){videoMuted=true;videoPlayer.attr("muted","muted");if($("#videoContainer #soundButtom").hasClass("soundOn")){$("#videoContainer #soundButtom").removeClass("soundOn");$("#videoContainer #soundButtom").addClass("soundOff");}}else{videoMuted=false;videoPlayer.attr("muted","");if($("#videoContainer #soundButtom").hasClass("soundOff")){$("#videoContainer #soundButtom").removeClass("soundOff");$("#videoContainer #soundButtom").addClass("soundOn");}}});$("#videoContainer #forwardButtom").mousedown(function(){console.log("forward clicked");clearInterval(videoSeekTimer);clearTimeout(mouseHandle);mouseHandle=setTimeout(function(){forward();},1000);}).mouseup(function(){clearInterval(videoSeekTimer);clearTimeout(mouseHandle);console.log("Time out clear");});$("#videoContainer #backwardButtom").mousedown(function(){console.log("backward clicked");if(!videoPlayer.attr("paused")||videoCurrentTime!=0){clearInterval(videoSeekTimer);clearTimeout(mouseHandle);mouseHandle=setTimeout(function(){backward();},1000);}}).mouseup(function(){clearInterval(videoSeekTimer);clearTimeout(mouseHandle);console.log("Time out clear");});$("#videoContainer #repeatButtom").click(function(){console.log("repeat clicked");if(videoRepeat){videoRepeat=false;$(this).css("opacity","0.5");}else{videoRepeat=true;$(this).css("opacity","1.0");}repeat();});function showCurrentTime(){videoSlideBar.slider("value",videoCurrentTime);$("#videoContainer #currentTime").html(formatPlayTime(videoCurrentTime));};function ready(){videoPlayer.bind('loadedmetadata',function(){videoDuration=videoPlayer.attr("duration");$("#videoContainer #duration").html(formatPlayTime(videoDuration));console.log("duration:"+videoDuration);videoSlideBar.slider({value:videoCurrentTime,min:0,max:videoDuration,slide:function(event,ui){console.log("ui:"+ui.value);videoCurrentTime=ui.value;videoPlayer.attr("currentTime",videoCurrentTime);showCurrentTime();}});});repeat();}function formatPlayTime(seconds){seconds=Math.round(seconds);hours=Math.floor(seconds/3600);hours=(hours>=10)?hours:"0"+hours;minutes=Math.floor(seconds/60);minutes=(minutes>=10)?minutes:"0"+minutes;seconds=Math.floor(seconds%60);seconds=(seconds>=10)?seconds:"0"+seconds;return hours+":"+minutes+":"+seconds;}function repeat(){if(videoRepeat){videoPlayer.attr("loop","loop");}else{videoPlayer.attr("loop","");}}function forward(){console.log("forward clicked");videoSeekTimer=setInterval(function(){if(videoCurrentTime>=videoDuration){stop();}else{videoPlayer.attr("currentTime",videoCurrentTime);showCurrentTime();videoCurrentTime=videoCurrentTime+1;}},100);videoPlayer.attr("currentTime",20.0);}function backward(){console.log("backward clicked");videoSeekTimer=setInterval(function(){if(videoCurrentTime<=0){stop();}else{videoPlayer.attr("currentTime",videoCurrentTime);showCurrentTime();videoCurrentTime=videoCurrentTime-1;}},100);videoPlayer.attr("currentTime",20.0);}function play(){if(videoPlayer.attr("paused")||videoPlayer.attr("ended")){console.log("play");videoTimer=setInterval(function(){videoCurrentTime=videoPlayer.attr("currentTime");if(videoRepeat){videoPlayer.attr("loop","loop");}else{videoPlayer.attr("loop","");}if($("#videoContainer #currentTime").html()!=videoCurrentTime){showCurrentTime();if(videoPlayer.attr("ended")){clearInterval(videoTimer);videoCurrentTime=0;if($("#videoContainer #playButtom").hasClass("pause")){$("#videoContainer #playButtom").removeClass("pause");$("#videoContainer #playButtom").addClass("play");}if(!$("#videoContainer #status").hasClass("play")){$("#videoContainer #status").addClass("play");$("#videoContainer #status").css("z-index","4");}}if(videoPlayer.attr("muted")!=videoMuted){videoPlayer.attr("muted",videoMuted);}}},1000);videoPlayer[0].play();if(!$("#videoContainer #playButtom").hasClass("pause")){$("#videoContainer #playButtom").removeClass("play");$("#videoContainer #playButtom").addClass("pause");}if($("#videoContainer #status").hasClass("play")){$("#videoContainer #status").removeClass("play");$("#videoContainer #status").css("z-index","2");}}else{console.log("pause");clearInterval(videoTimer);videoPlayer[0].pause();if($("#videoContainer #playButtom").hasClass("pause")){$("#videoContainer #playButtom").removeClass("pause");$("#videoContainer #playButtom").addClass("play");}if(!$("#videoContainer #status").hasClass("play")){$("#videoContainer #status").addClass("play");$("#videoContainer #status").css("z-index","4");}}}function stop(){console.log("stop clicked");clearInterval(videoSeekTimer);videoPlayer[0].pause();videoCurrentTime=0;videoPlayer.attr("currentTime",0);$("#videoContainer #currentTime").html(formatPlayTime(0));if($("#videoContainer #playButtom").hasClass("pause")){$("#videoContainer #playButtom").removeClass("pause");$("#videoContainer #playButtom").addClass("play");}$("#videoContainer #status").css("z-index","2");}function layout(){videoPlayerHeight=videoPlayer.css("height");videoPlayerWidth=videoPlayer.css("width");videoContainer.css("height",videoPlayerHeight).css("width",videoPlayerWidth);videoController.css("width",videoPlayerWidth);}function fullScreenOn(){console.log("full Screen On");videoIsFullScreen=true;videoOrigWidth=videoPlayer.css("width");videoOrigHeight=videoPlayer.css("height");console.log("W:"+videoOrigWidth+"  H:"+videoOrigHeight);videoContainer.css("position","fixed").css("width",window.innerWidth+"px").css("height",window.innerHeight+"px").css("top","0px").css("left","0px");videoPlayer.css("position","fixed").css("width",window.innerWidth+"px").css("height",window.innerHeight+"px").css("top","0").css("left","0");videoController.css("position","fixed").css("left","0px").css("width",window.innerWidth+"px");$("#video, #controller").mouseover(function(){if(videoPlayer.attr("controls")!="")videoPlayer.attr("controls","");$("#videoContainer #control,#controlBg, #slideBar").show();console.log("mouseIn");}).mouseout(function(){$("#videoContainer #control,#controlBg, #slideBar").hide();console.log("mouseout");}).mousemove(function(){if(videoPlayer.attr("controls")!="")videoPlayer.attr("controls","");});if($("#videoContainer #fullScreenButtom").hasClass("fullScreenOn")){$("#videoContainer #fullScreenButtom").removeClass("fullScreenOn");$("#videoContainer #fullScreenButtom").addClass("fullScreenOff");}}function fullScreenOff(){console.log("full Screen Off");console.log("W:"+videoOrigWidth+"  H:"+videoOrigHeight);videoIsFullScreen=false;videoContainer.css("position","relative").css("width",videoOrigWidth).css("height",videoOrigHeight).css("top","0px").css("left","0px");console.log("CW:"+videoContainer.css("width")+"  CH:"+videoContainer.css("height"));videoPlayer.css("position","absolute").css("width",videoOrigWidth).css("height",videoOrigHeight).css("top","0").css("left","0");videoController.css("position","absolute").css("left","0").css("width",videoOrigWidth);$("#video, #controller").unbind("mouseover").unbind("mousemove").unbind("mouseout");if($("#videoContainer #fullScreenButtom").hasClass("fullScreenOff")){$("#videoContainer #fullScreenButtom").removeClass("fullScreenOff");$("#videoContainer #fullScreenButtom").addClass("fullScreenOn");}}}
*/

function htmlPlayer(){	
	// debug variables
	// if show the informations of debug in console 
	var debugFlag 			= true;
	// how to show the message of error: 1 - console , 0 - alert
	var errorHandlerType 	= 1;
	// how to show the message of debug: 1 - console , 0 - alert
	var debugHandlerType 	= 1;
	
	// parent Tag
	var parentTagId;
	
	// xml option
	// the path to global xml file
	var globalXmlPath 		= "xml/";
	// the filename of the global xml file
	var globalXmlFile 		= "global.xml";
	// xml object
	var globalXml;
	// xml variables
	var xmlInterface		= "interface";	
	
	//interface
	var videoContainer;
	var videoPlayer;
	var videoController;
	var videoSlideBar;
	var videoSoundSlideBar;
	var videoTimer;
	var videoDuration;
	var videoCurrentTime = 0;
	var videoSeekTimer;
	var videoSeekTimePoint;
	var videoRepeat = false;
	var mouseHandle;
	var videoOrigWidth, videoOrigHeight;
	var videoIsFullScreen;
	var videoMuted = false;	
	
	// video object
	var v;
	// canvas object
    var canvas;
    var context;
    var back;
    var backcontext;
    
    // the selector of the 3d effect
    var effectSelector;    
    var cw, ch; 
    
    initPlayer();
	layout();
	ready();		
	showCurrentTime();    
    
    // load the xml
    function loadXML(){
    	try {
    		var globalXmlContent = a(globalXmlPath+globalXmlFile, {}, "post", false, false);
    		if(!globalXmlContent){
    			return null;
    		}
    		globalXml = globalXmlContent.documentElement;
    	}
    	catch(e) {
    		errorHandler(errorHandlerType, arguments.callee.name, e);
    	}
    }
    
    function initPlayer(){
    	try {
    		videoContainer = $("#videoContainer");
    		videoPlayer = $("#videoContainer #video");
    		videoController = $("#videoContainer #controller");
    		videoSlideBar = $("#videoContainer #slideBar");
    		videoSoundSlideBar = $("#videoContainer #soundSlideBar");
    		videoPlayer.attr("controls",""); 
    		
    		
  
    		
    		// get the video object
    		v 			= document.getElementById("video");    		
    		// get the canvas object
    		canvas 		= document.createElement('canvas');   		
    		context 	= canvas.getContext('2d');
    	    //back 		= document.createElement('canvas');
    	    //backcontext = back.getContext('2d');
    	    
    	    v.addEventListener('play', function(){
    	    	cw = v.clientWidth;
    	        ch = v.clientHeight;
    	        canvas.width = cw;
    	        canvas.height = ch;
    	        //back.width = cw;
    	        //back.height = ch;
    	        draw(v,context,cw,ch);
    	    },false);
    	}
    	catch(e) {
    		errorHandler(errorHandlerType, arguments.callee.name, e);
    	}
    }
    
    
    function getNodeValue(tagName, index, parentTag){
    	var resNodes;
    	var resNodesLength;
    	var srcElement;
    	index 			= !index ? 0 : intval(index);
    	srcElement 		= !parentTag ? globalXml : globalXml.getElementsByTagName(parentTag)[0];
    	resNodes		= srcElement.getElementsByTagName(tagName)[0].childNodes;
    	resNodesLength 	= resNodes.length;
    	if(index >= 0 && index < resNodesLength){
    		if(resNodes[index].nodeType == 3 && !(/^\s+$/.test(resNodes[index].nodeValue))){    			
    			return resNodes[index].nodeValue;
    		}
    	}    	
    	return null;
    }
    
    function getNodeName(tagName, index, parentTag){
    	var resNodes;
    	var resNodesLength;
    	var srcElement;
    	index 			= !index ? 0 : intval(index);
    	srcElement 		= !parentTag ? globalXml : globalXml.getElementsByTagName(parentTag)[0];
    	resNodes		= srcElement.getElementsByTagName(tagName)[0].childNodes;
    	resNodesLength 	= resNodes.length;
    	if(index >= 0 && index < resNodesLength){
    		return resNodes[index].nodeName;
    	}    	
    	return null;
    }    
    
    function getNodeDate(search, tagName, parentTag){
    	var resNodes;
    	var resNodesLength;
    	var srcElement;
    	var resNodeName;
    	var data 		= {};
    	srcElement 		= !parentTag ? globalXml : globalXml.getElementsByTagName(parentTag)[0];
    	resNodes		= srcElement.getElementsByTagName(tagName)[0].childNodes;
    	resNodesLength 	= resNodes.length;    	
    	// depth search
    	for(var i = 0; i < resNodesLength; i++ ){    		
    		if(resNodes[i].nodeType == 1){
    			if(resNodes[i].childNodes.length > 0){
    				resNodeName 		= resNodes[i].nodeName;
    				data[resNodeName] 	= getNodeDate(resNodeName, tagName);
        		}
    		}
    		else if(childs[i].nodeType == 3 && (/^\s+$/.test(childs[i].nodeValue))){
    			// found the empty node of the xml
    		}
    		else{
    			resNodeName 		= resNodes[i].nodeName;
    			data[resNodeName] 	= getNodeDate(resNodeName, tagName);
    		}    		
    	}
    	return data;
    }
    
    function searchNode(search, tagName, parentTag){
    	var resNodes;
    	var resNodesLength;
    	var srcElements;
    	var srcElementsLength;
    	var srcNodes;
    	var srcNodesLength;
    	var srcNode;
    	var resNodeName;
    	srcElements 		= globalXml.getElementsByTagName(parentTag);
    	srcElementsLength	= srcElements.length;
    	for(var i = 0; i < srcElementsLength; i++ ){    
    		srcNode			= srcElements[i].getElementsByTagName(tagName)[0].childNodes[0];
    		if(srcNode.nodeType == 3 && srcNode.nodeValue == search){
    			return true;
    		}    		
    	}
    	return false; 	   	
    }
    
    function checkElement(search, id, parent){
    	try {
    		data = getNodeDate(search, id, parent);
    		console.log(data);
    		var checkObject = document.getElementById(id);
    		if(!checkObject){
    			if(forceBuild == 'true'){
    				checkObject = buildElement(data);    				
    			}
    			else{
    				return null;
    			}
    		}
    		return checkObject;    		
    	}
    	catch(e) {
    		errorHandler(errorHandlerType, arguments.callee.name, e);
    	}
    }
    
    function buildElement(data){
    	 try {
    		 var parent = data.parent;
    		 var type	= data.type;
    		 var id		= data.tagattributes.id;
    		 var index	= data.index;
    		 var parentObject;
    		 if(!parent){
    			 parentObject = document.body;
    		 }
    		 else{
    			 var parentObject = document.getElementById(parent);
    			 if(!parentObject){
    				 parentObject = document.body;
    			 }
    		 }
    		 if(!type){
    			 type = "div";
    		 }
    		 // create the element with the type
    		 var tempElement = document.createElement(type);
    		 // get the attributes    		 
    		 var attributes = data.tagattributes;
    		 for(var i in attributes){
    			 if(typeof(attributes[i])=="function"){ 
    				 //ignore these attributes, which type is function
    			 }
    			 else{
    				 tempElement.setAttribute(i, attributes[i]);    
    			 } 
    		 }
    		 // get the content of the element
    		 var content = data.content;
    		 // insert the content into the element
    		 tempElement.innerHTML = content;
    		 parentObject.appendChild(tempElement);
    		 return document.getElementById(id);
    	 }
    	 catch(e) {
     		errorHandler(errorHandlerType, arguments.callee.name, e);
     	}
    }
    
    function _asLittleEndianHex(value, bytes) {
        // Convert value into little endian hex bytes
        // value - the number as a decimal integer (representing bytes)
        // bytes - the number of bytes that this value takes up in a string

        // Example:
        // _asLittleEndianHex(2835, 4)
        // > '\x13\x0b\x00\x00'

        var result = [];

        for (; bytes>0; bytes--) {
            result.push(String.fromCharCode(value & 255));
            value >>= 8;
        }

        return result.join('');
    }

    function _collapseData(rows, row_padding) {
        // Convert rows of RGB arrays into BMP data
        var i,
            rows_len = rows.length,
            j,
            pixels_len = rows_len ? rows[0].length : 0,
            pixel,
            padding = '',
            result = [];

        for (; row_padding > 0; row_padding--) {
            padding += '\x00';
        }

        for (i=0; i<rows_len; i++) {
            for (j=0; j<pixels_len; j++) {
                pixel = rows[i][j];
                result.push(String.fromCharCode(pixel[2]) +
                            String.fromCharCode(pixel[1]) +
                            String.fromCharCode(pixel[0]));
            }
            result.push(padding);
        }

        return result.join('');
    }

    function _scaleRows(rows, scale) {
        // Simplest scaling possible
        var real_w = rows.length,
            scaled_w = parseInt(real_w * scale),
            real_h = real_w ? rows[0].length : 0,
            scaled_h = parseInt(real_h * scale),
            new_rows = [],
            new_row, x, y;

        for (y=0; y<scaled_h; y++) {
            new_rows.push(new_row = []);
            for (x=0; x<scaled_w; x++) {
                new_row.push(rows[parseInt(y/scale)][parseInt(x/scale)]);
            }
        }
        return new_rows;
    }
    
    
    
    function draw(v,c,w,h) {
        if(v.paused || v.ended) return false;
        // First, draw it into the backing canvas
        //bc.drawImage(v,0,0,w,h);
        
        // Grab the pixel data from the backing canvas
        /*
        var idata = bc.getImageData(0,0,w,h);
        var data = idata.data;
       
        // Loop through the pixels, turning them grayscale
        for(var i = 0; i < data.length; i+=4) {
        	
           
        	var r = data[i];
            var g = data[i+1];
            var b = data[i+2];
            var brightness = (3*r+4*g+b)>>>3;
            data[i] = brightness;
            data[i+1] = brightness;
            data[i+2] = brightness;
            
        }
    	
        
    	
    	
        idata.data = data;
        // Draw the pixels onto the visible canvas
        c.putImageData(idata,0,0);
        // Start over!
        */
        setTimeout(function(){ 
        	draw(v,c,w,h);
        	
        }, 0);
    }
	
	
	
	$(window).resize(function() {
		 if(videoIsFullScreen){
			 fullScreenOn();
		 }
	});	
	
	videoSoundSlideBar.slider({
		value: 0.5,
		min: 0,
		max: 1.0,
		step: 0.01,
		slide: function( event, ui ) {
		console.log("ui:"+ui.value);
			videoPlayer.attr("volume",ui.value);
			if(ui.value==0){
				videoMuted = true;
				videoPlayer.attr("muted","muted");
				if($("#videoContainer #soundButtom").hasClass("soundOn")){
					$("#videoContainer #soundButtom").removeClass("soundOn");
					$("#videoContainer #soundButtom").addClass("soundOff");
				}
			}
			else{
				videoMuted = false;
				videoPlayer.attr("muted","");
				if($("#videoContainer #soundButtom").hasClass("soundOff")){
					$("#videoContainer #soundButtom").removeClass("soundOff");
					$("#videoContainer #soundButtom").addClass("soundOn");
				}
			}
			//videoCurrentTime = ui.value;
			//videoPlayer.attr("currentTime",videoCurrentTime);
			//showCurrentTime();
		}
	});
	
	//videoPlayer.mouseenter(function(){console.log("player mouseIN")}).mouseleave(function(){console.log("player mouseOut")});
	
	videoContainer.mouseenter(
		function(){
//			if(videoPlayer.attr("controls")!="")videoPlayer.attr("controls","");
//			$("#videoContainer #control").dequeue("fader").queue("fader", function(next) {
//			    $(this).animate({opacity: 0.5},
//			        {duration: 500, queue: false});
//			    next();
//			})
//			.dequeue("fader");
			$("#videoContainer #control,#controlBg, #slideBar").show();
			console.log("mouseIn");
		}
	).mouseleave(
		function(){
//			$("#videoContainer #control").dequeue("fader").delay(1000, "fader")
//			.queue("fader", function(next) {
//			    $(this).animate({opacity: 0},
//			        {duration: 1000, queue: false});
//			    next();
//			})
//			.dequeue("fader");
			$("#videoContainer #control,#controlBg, #slideBar").hide();
			console.log("mouseout");
		}
	).mousemove(
		function(){
			if(videoPlayer.attr("controls")!="")videoPlayer.attr("controls","");
		}
	);
	
	$("#videoContainer .controlItem").mouseenter(
		function(){
			$(this).css("opacity","1");
		}
	).mouseleave(
		function(){
			$(this).css("opacity","0.5");
		}		
	);
	
	$("#videoContainer #playButtom, #videoContainer #video, #videoContainer .play").live("click",
		function(){
			console.log("play clicked");
			play();
		}
	);
	
	$("#videoContainer #stopButtom").click(
		function(){
			console.log("stop clicked");
			stop();
			clearInterval(videoTimer);
		}
	);
	
	$("#videoContainer #fullScreenButtom").click(
		function(){
			console.log("fullScreen clicked");
			if(videoIsFullScreen){
				fullScreenOff();
			}
			else{
				fullScreenOn();
			}
		}
	);
	
	$("#videoContainer #soundButtom").click(
		function(){
			console.log("sound clicked");
			if(!videoMuted){
				videoMuted = true;
				videoPlayer.attr("muted","muted");
				if($("#videoContainer #soundButtom").hasClass("soundOn")){
					$("#videoContainer #soundButtom").removeClass("soundOn");
					$("#videoContainer #soundButtom").addClass("soundOff");
				}
			}
			else{
				videoMuted = false;
				videoPlayer.attr("muted","");
				if($("#videoContainer #soundButtom").hasClass("soundOff")){
					$("#videoContainer #soundButtom").removeClass("soundOff");
					$("#videoContainer #soundButtom").addClass("soundOn");
				}
			}
		}
	);
	
	$("#videoContainer #forwardButtom").mousedown(
		function(){
			console.log("forward clicked");
			clearInterval(videoSeekTimer);
			clearTimeout(mouseHandle);
			mouseHandle = setTimeout(function(){
				forward();
			}, 1000);		
		}
	).mouseup(
		function(){
			clearInterval(videoSeekTimer);
			clearTimeout(mouseHandle);
			console.log("Time out clear");
		}
	);
	
	$("#videoContainer #backwardButtom").mousedown(
		function(){
			console.log("backward clicked");
			if(!videoPlayer.attr("paused")||videoCurrentTime!=0){
				clearInterval(videoSeekTimer);
				clearTimeout(mouseHandle);
				mouseHandle = setTimeout(function(){
					backward();
				}, 1000);
			}
		}
	).mouseup(
		function(){
			clearInterval(videoSeekTimer);
			clearTimeout(mouseHandle);
			console.log("Time out clear");
		}
	);
	
	$("#videoContainer #repeatButtom").click(
		function(){
			console.log("repeat clicked");
			if(videoRepeat){
				videoRepeat = false;
				$(this).css("opacity","0.5");
			}
			else{
				videoRepeat = true;
				$(this).css("opacity","1.0");
			}
			repeat();
		}
	);
	
	function showCurrentTime(){
		videoSlideBar.slider( "value" , videoCurrentTime);
		$("#videoContainer #currentTime").html(formatPlayTime(videoCurrentTime));
	};

	function ready(){
		videoPlayer.bind('loadedmetadata', function() {
			videoDuration = videoPlayer.attr("duration");
			$("#videoContainer #duration").html(formatPlayTime(videoDuration));
			console.log("duration:"+videoDuration);
			videoSlideBar.slider({
				value: videoCurrentTime,
				min: 0,
				max: videoDuration,
				slide: function( event, ui ) {
				console.log("ui:"+ui.value);
					videoCurrentTime = ui.value;
					videoPlayer.attr("currentTime",videoCurrentTime);
					showCurrentTime();
				}
			});		
		});
		repeat();	
	}

	function formatPlayTime(seconds) {
		seconds = Math.round(seconds);
		hours	= Math.floor(seconds / 3600);
		hours 	= (hours >= 10) ? hours : "0" + hours;
		minutes = Math.floor(seconds / 60);
		minutes = (minutes >= 10) ? minutes : "0" + minutes;
		seconds = Math.floor(seconds % 60);
		seconds = (seconds >= 10) ? seconds : "0" + seconds;
		return hours + ":" + minutes + ":" + seconds;
	}

	function repeat(){
		if(videoRepeat){
			videoPlayer.attr("loop","loop");
		}
		else{
			videoPlayer.attr("loop","");
		}
	}

	function forward(){
		console.log("forward clicked");
		videoSeekTimer = setInterval(function(){
			if(videoCurrentTime>=videoDuration){
				stop();
				//clearInterval(videoSeekTimer);
			}
			else{			
				videoPlayer.attr("currentTime",videoCurrentTime);			
				showCurrentTime();
				videoCurrentTime = videoCurrentTime+1;
			}
		},100);
		videoPlayer.attr("currentTime",20.0);
	}

	function backward(){
		console.log("backward clicked");
		videoSeekTimer = setInterval(function(){
			if(videoCurrentTime<=0){
				stop();
				//clearInterval(videoSeekTimer);
			}
			else{
				videoPlayer.attr("currentTime",videoCurrentTime);
				showCurrentTime();
				videoCurrentTime = videoCurrentTime-1;			
			}
		},100);
		videoPlayer.attr("currentTime",20.0);
	}

	function play(){
		if(videoPlayer.attr("paused")||videoPlayer.attr("ended")){//play	
			console.log("play");
			intervalID = setInterval(drawScene, 15);
			videoTimer = setInterval(function(){
				//tick();
				//updateTexture();
				videoCurrentTime = videoPlayer.attr("currentTime");
				if(videoRepeat){
					videoPlayer.attr("loop","loop");
				}
				else{
					videoPlayer.attr("loop","");
				}
				if($("#videoContainer #currentTime").html() != videoCurrentTime){
					//console.log("time -- "+videoCurrentTime);
					showCurrentTime();
					if(videoPlayer.attr("ended")){					
						clearInterval(videoTimer);
						videoCurrentTime = 0;
						if($("#videoContainer #playButtom").hasClass("pause")){
							$("#videoContainer #playButtom").removeClass("pause");
							$("#videoContainer #playButtom").addClass("play");
						}
						if(!$("#videoContainer #status").hasClass("play")){
							$("#videoContainer #status").addClass("play");
							$("#videoContainer #status").css("z-index","4");
						}
					}
					if(videoPlayer.attr("muted")!=videoMuted){
						videoPlayer.attr("muted",videoMuted);
					}				
				}
			},1000);
			videoPlayer[0].play();
			if(!$("#videoContainer #playButtom").hasClass("pause")){
				$("#videoContainer #playButtom").removeClass("play");
				$("#videoContainer #playButtom").addClass("pause");
			}
			if($("#videoContainer #status").hasClass("play")){
				$("#videoContainer #status").removeClass("play");
				$("#videoContainer #status").css("z-index","2");
			}
			
		}
		else{//pause
			console.log("pause");
			clearInterval(videoTimer);
			clearInterval(intervalID);
			videoPlayer[0].pause();
			if($("#videoContainer #playButtom").hasClass("pause")){
				$("#videoContainer #playButtom").removeClass("pause");
				$("#videoContainer #playButtom").addClass("play");
			}
			if(!$("#videoContainer #status").hasClass("play")){
				$("#videoContainer #status").addClass("play");
				$("#videoContainer #status").css("z-index","4");
			}
		}
	}

	function stop(){
		console.log("stop clicked");
		clearInterval(videoSeekTimer);
		clearInterval(intervalID);
		videoPlayer[0].pause();
		videoCurrentTime = 0;
		videoPlayer.attr("currentTime",0);	
		$("#videoContainer #currentTime").html(formatPlayTime(0));
		if($("#videoContainer #playButtom").hasClass("pause")){
			$("#videoContainer #playButtom").removeClass("pause");
			$("#videoContainer #playButtom").addClass("play");
		}	
		$("#videoContainer #status").css("z-index","2");	
	}

	function layout(){
		videoPlayerHeight = videoPlayer.css("height");
		videoPlayerWidth = videoPlayer.css("width");
		videoContainer.css("height",videoPlayerHeight)
		.css("width",videoPlayerWidth);
		videoController.css("width",videoPlayerWidth);
	}

	function fullScreenOn(){
		console.log("full Screen On");
		videoIsFullScreen = true;
		videoOrigWidth = videoPlayer.css("width");
		videoOrigHeight = videoPlayer.css("height");
		console.log("W:"+videoOrigWidth+"  H:"+videoOrigHeight);
		videoContainer.css("position","fixed")
		.css("width", window.innerWidth + "px")
		.css("height", window.innerHeight + "px")
		.css("top","0px")
		.css("left","0px");
		videoPlayer.css("position","fixed")
		.css("width", window.innerWidth + "px")
		.css("height", window.innerHeight + "px")
		.css("top","0")
		.css("left","0");
		videoController.css("position","fixed")
		.css("left","0px")
		.css("width",window.innerWidth + "px");
		$("#video, #controller").mouseover(
			function(){
				if(videoPlayer.attr("controls")!="")videoPlayer.attr("controls","");
//				$("#videoContainer #control").dequeue("fader").queue("fader", function(next) {
//				    $(this).animate({opacity: 0.5},
//				        {duration: 500, queue: false});
//				    next();
//				})
//				.dequeue("fader");
				$("#videoContainer #control,#controlBg, #slideBar").show();
				console.log("mouseIn");
			}
		).mouseout(
			function(){
//				$("#videoContainer #control").dequeue("fader").delay(1000, "fader")
//				.queue("fader", function(next) {
//				    $(this).animate({opacity: 0},
//				        {duration: 1000, queue: false});
//				    next();
//				})
//				.dequeue("fader");
				$("#videoContainer #control,#controlBg, #slideBar").hide();
				console.log("mouseout");
			}
		).mousemove(
			function(){
				if(videoPlayer.attr("controls")!="")videoPlayer.attr("controls","");
			}
		);
		if($("#videoContainer #fullScreenButtom").hasClass("fullScreenOn")){
			$("#videoContainer #fullScreenButtom").removeClass("fullScreenOn");
			$("#videoContainer #fullScreenButtom").addClass("fullScreenOff");
		}
	}
		
	function fullScreenOff(){
		console.log("full Screen Off");
		console.log("W:"+videoOrigWidth+"  H:"+videoOrigHeight);
		videoIsFullScreen = false;
		videoContainer.css("position","relative")
		.css("width", videoOrigWidth)
		.css("height", videoOrigHeight)
		.css("top","0px")
		.css("left","0px");	
		console.log("CW:"+videoContainer.css("width")+"  CH:"+videoContainer.css("height"));
		videoPlayer.css("position","absolute")
		.css("width", videoOrigWidth)
		.css("height", videoOrigHeight)
		.css("top","0")
		.css("left","0");
		videoController.css("position","absolute")
		.css("left","0")
		.css("width",videoOrigWidth);
		$("#video, #controller").unbind("mouseover").unbind("mousemove").unbind("mouseout");
		if($("#videoContainer #fullScreenButtom").hasClass("fullScreenOff")){
			$("#videoContainer #fullScreenButtom").removeClass("fullScreenOff");
			$("#videoContainer #fullScreenButtom").addClass("fullScreenOn");
		}
	}
	
	/*
	 * 
	 * common functions
	 * 
	 */
	 //error handler
	 function errorHandler(type, tracker, msg){
	 	try{
	 		if(!type){
	 			type = !errorHandlerType?0:errorHandlerType;
	 		}
	 		if(!tracker){
	 			tracker = arguments.callee.name;
	 		}
	 		if(!msg){
	 			msg = "";
	 		}
	 		
	 		var _timer = new Date();
	 		if(!_timer){
	 			throw("Initailize the Date()-Object failed.");
	 		}
	 		var _msg = "---> Error:"+_timer.getFullYear()+"/"+(_timer.getMonth()+1)+"/"+_timer.getDate()+"-"+_timer.getHours()+":"+_timer.getMinutes()+":"+_timer.getSeconds()+":"+_timer.getMilliseconds();
	 		_msg += " - "+tracker+" - "+msg;
	 		
	 		if(type == 0){
	 			alert(_msg);
	 		}
	 		else if(type == 1){
	 			console.log(_msg);
	 			
	 		}
	 	}
	 	catch(e){
	 		alert(arguments.callee.name+" - "+e);
	 	}
	 }

	 /*	  * 
	  debug handler
	  */
	 function debug(msg, type){
	 	try{
	 		if(!type){
	 			type = !debugHandlerType?0:debugHandlerType;
	 		}
	 		if(debugFlag){
	 			var _timer = new Date();
	 			if(!_timer){
	 				throw("Initailize the Date()-Object failed.");
	 			}
	 			var _msg = "---> Debug Start:"+_timer.getFullYear()+"/"+(_timer.getMonth()+1)+"/"+_timer.getDate()+"-"+_timer.getHours()+":"+_timer.getMinutes()+":"+_timer.getSeconds()+":"+_timer.getMilliseconds();
	 			console.log(_msg);
	 			console.log(msg);
	 			_msg = "<--- Debug End";
	 			console.log(_msg);
	 		}
	 	}
	 	catch(e){
	 		alert(arguments.callee.name+" - "+e);
	 	}
	 }

	 /*
	 *
	  ajax handler
	 */

	 function a(url, data, type, async, cache){
	 	try{
	 		var _response = "";
	 		if(!type || (type.toLowerCase() != "post"&&type.toLowerCase() != "get") ){
	 			type = "get";
	 		}
	 		if(!data || data instanceof Object ){
	 			data = {};
	 		}
	 		if(cache != false&&cache != true){
	 			cache = true;
	 		}
	 		
	 		var _async;
	 		if(async != false&&async != true){
	 			_async = true;
	 		}
	 		else{
	 			_async = async==true?true:false;
	 		}
	 		
	 		if (typeof jQuery == 'undefined') {
	 			var _xmlHttp;
	 			var _url = url;
	 			var _parameters = "";
	 			
	 			try{
	 				// Firefox, Opera 8.0+, Safari, IE7
	 				_xmlHttp = new XMLHttpRequest();
	 			}
	 			catch(e){
	 				// Old IE
	 				try{
	 					_xmlHttp=new ActiveXObject("Microsoft.XMLHTTP");
	 			    }
	 				catch(e){
	 					errorHandler(errorHandlerType, arguments.callee.name, "Your browser does not support XMLHTTP!");
	 					return null;  
	 			    }
	 			}
	 			
	 			for(var _parameterKey in data){   
	 		       if(typeof(data[_parameterKey]) == "function"){     
	 		            data[_parameterKey]();    
	 		       }
	 		       else{     
	 		            _parameters += _parameterKey + "=" + data[_parameterKey] + "&";
	 		       }
	 		    }
	 			if(type == 'get'){
	 				if(_parameters !== "undefined" && _parameters != null){
	 					_url += '?' + _parameters;
	 				}
	 				_parameters = null;
	 			}			
	 			_xmlHttp.onreadystatechange = function()
	 			{
	 				if (_xmlHttp.readyState == 4 && _xmlHttp.status == 200){
	 					_response = _xmlHttp.responseText;					
	 				}
	 			};
	 			_xmlHttp.open(type, _url, _async);
	 			_xmlHttp.send(_parameters);			
	 		} else {
	 			$.ajax({
	 				type	: type,
	 				url		: url,
	 				async	: async,
	 				data	: data,
	 				beforeSend: function() {
	 				},
	 				success: function(data) {
	 					_response = data;
	 					
	 				},
	 				complete: function() {				
	 				},
	 				error: function() {
	 					debug("ajax request error");
	 					return null;
	 				}
	 			});	 			
	 		}
	 		return _response;
	 	}
	 	catch(e){
	 		errorHandler(errorHandlerType, arguments.callee.name, e);
	 	}
	 }

	 /*
	  * change the degree to the radius
	  */
	 function degToRad(degrees) {
	     return degrees * Math.PI / 180;
	 }

	 /*
	  * set the size power of two
	  */
	 function isPowerOfTwo(x) {
	     return (x & (x - 1)) == 0;
	 }
	  
	 function nextHighestPowerOfTwo(x) {
	     --x;
	     for (var i = 1; i < 32; i <<= 1) {
	         x = x | x >> i;
	     }
	     return x + 1;
	 }
	
}
